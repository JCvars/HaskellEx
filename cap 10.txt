1. Redefine putStr :: String -> IO () using a list comprehension and the library function
sequence_ :: [IO a] -> IO ().

putStr :: String -> IO ()
putStr xs = sequence_  [putChar x| x <- xs]
			

2. Using recursion, define a version of putBoard :: Board -> IO () that displays nim boards of
any size, rather than being specific to boards with just five rows of stars. Hint: first define an
auxiliary function that takes the current row number as an additional argument.

Type Board = [Int]

putRow :: Int -> Int -> IO ()
putRow row num = do
  putStr (show row)
  putStr ": "
  putStrLn (concat (replicate num "* "))

putBoardRow :: Int -> Board -> IO ()
putBoardRow _ [] = return ()
putBoardRow r (n:ns) = do
  putRow r n
  putBoardRow (r + 1) ns

putBoard :: Board -> IO ()
putBoard = putBoardRow 1
			
          

3. In a similar manner to the first exercise, redefine the generalised version of putBoard using a list
comprehension and sequence_.

putBoard b = sequence_  [putRow x y| (x,y) <- zip  [1..] b ]

4. Define an action adder :: IO () that reads a given number of integers from the keyboard, one
per line, and displays their sum. For example:
> adder
How many numbers? 5
1
3
5
7
9
The total is 25
Hint: start by defining an auxiliary function that takes the current total and how many numbers
remain to be read as arguments. You will also likely need to use the library functions read and
show.


getDigit :: IO Int
getDigit = do 
              x <- getLine
		  let num = read x :: Int
		  return num

CapInts :: Int -> IO  [Int]
           CapInts 0 = return []
           CapInts r = do  x <- getDigit
                           xs <- CapInts (r-1)
                           return [x:xs]

adder :: IO ()
adder = do putStr "How many numbers? "
          r <- getDigit
          ns <- CapInts r
          putStr " The total is  "
          putStrL show(sum ns)
          return ()

          



5. Redefine adder using the function sequence :: [IO a] -> IO [a] that performs a list of
actions and returns a list of the resulting values.

CapInts :: Int -> IO [Int]
CapInts n = sequence (replicate n getDigit)


6. Using getCh, define an action readLine :: IO String that behaves in the same way as
getLine, except that it also permits the delete key to be used to remove characters. Hint: the delete
character is ’\DEL’, and the control character for moving the cursor back one space is ’\b’.



import System.IO

getCh :: IO Char
getCh = do
  hSetEcho stdin False
  x <- getChar
  hSetEcho stdin True
  return x

readLine1  readLine' :: String -> IO String
readLine1 xs= do x <- getCh
                 case x of 
                      '\n' -> do
                      	putChar '\n'
                      	return xs
                      '\DEL' -> do
                      	putStr "\b \b"
                      	readline1(init xs)
                       _ -> do
                        putChar x
                       	readLine1 (xs ++ [x])
  
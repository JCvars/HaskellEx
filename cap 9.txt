1. Redefine the combinatorial function choices using a list comprehension rather than using
composition, concat and map.

subs :: [a] -> [[a]]
subs [] = [[]]
subs (x:xs) = yss ++ map (x :) yss
  where
    yss = subs xs

interleave :: a -> [a] -> [[a]]
interleave x [] = [[x]]
interleave x (y:ys) = (x : y : ys) : map (y :) (interleave x ys)

perms :: [a] -> [[a]]
perms [] = [[]]
perms (x:xs) = concat (map (interleave x) (perms xs))

choices :: [a] -> [[a]]
choices xss = [p | xs <- subs xss, p <- perms xs]



2. Define a recursive function isChoice :: Eq a => [a] -> [a] -> Bool that decides if one list
is chosen from another, without using the combinatorial functions perms and subs. Hint: start by
defining a function that removes the first occurrence of a value from a list.

removes :: Eq a => a -> [a] -> [a]
removes _ [] = []
removes x (y:ys)
  | x == y = ys
  | otherwise = y : removeOne x ys


isChoice :: Eq a => [a] -> [a] -> Bool
isChoice [] _ = True
IsChoise (x:xs) ys=  x `elem` ys && IsChoise xs (removes x ys)



3. What effect would generalising the function split to also return pairs containing the empty list
have on the behaviour of solutions?


No daria resultado


4. Using the functions choices, exprs, and eval, verify that there are 33,665,406 possible
expressions over the numbers 1, 3, 7, 10, 25, 50, and that only 4,672,540 of these expressions
evaluate successfully.

length [e | ns' <- choices [1, 3, 7, 10, 25, 50], e <- exprs ns'])
length [i | ns' <- choices [1, 3, 7, 10, 25, 50], e <- exprs ns', i <- eval e]

5. Similarly, verify that the number of expressions that evaluate successfully increases to 10,839,369
if the numeric domain is generalised to arbitrary integers. Hint: modify the definition of valid.

valid :: Op -> Int -> Int -> Bool
valid Add _ _ = True
valid Sub _ _ = True
valid Mul _ _ = True
valid Div x y = y /= 0 && x `mod` y == 0 -- MODIFY HERE

6. Modify the final program to:
a. allow the use of exponentiation in expressions;

Data Op
  = Add
  | Sub
  | Mul
  | Div
  | Exp

instance Show Op where
  show Add = "+"
  show Sub = "-"
  show Mul = "*"
  show Div = "/"
  show Exp = "^"

valid :: Op -> Int -> Int -> Bool
valid Add x y = x <= y
valid Sub x y = x > y
valid Mul x y = x /= 1 && y /= 1 && x <= y
valid Div x y = y /= 0 && y /= 1 && x `mod` y == 0
valid Exp x y = x >= 0 && y >= 0

apply :: Op -> Int -> Int -> Int
apply Add x y = x + y
apply Sub x y = x - y
apply Mul x y = x * y
apply Div x y = x `div` y
apply Exp x y = x ^ y


b. produce the nearest solutions if no exact solution is possible;

data nearst  exac, near, non
crear funcion 

nears target lista ||<epsilon



c. order the solutions using a suitable measure of simplicity.

solutionc = simplesort . solution 
ordena por la longitud, 


